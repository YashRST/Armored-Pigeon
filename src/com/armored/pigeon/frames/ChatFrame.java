package com.armored.pigeon.frames;


import com.armored.pigeon.DTO.*;
import com.armored.pigeon.interfaces.dto.*;
import com.armored.pigeon.server.*;
import com.armored.pigeon.chatBackup.*;
import com.armored.pigeon.cache.*;
import java.awt.Color;
import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.Graphics;
import java.util.*;
import java.util.List;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import static javax.swing.SwingConstants.*;
import javax.swing.table.*;
import javax.swing.JTable;
import javax.swing.filechooser.FileSystemView;


public class ChatFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public static UserCache userCache;
    public static String loginId = "Harsh@123";
    private userDTO friendInfo;
    public static String response;
    private int btnType = 1;
    private userDTOInterface recipient;
    private static ArrayList<Message> messages = new ArrayList<>();
    public static HashMap<String, ArrayList<Message>> messageCache = new HashMap<>();
    
    public ChatFrame() {
        initComponents();
        this.setName("ChatFrame");
        setExtendedState(ChatFrame.MAXIMIZED_BOTH);
        readCache(loginId);
        printFriendList();
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("logo.png")));
        MessageTextField.requestFocus();
        this.messagePanel.setVisible(false);
        if(response.equalsIgnoreCase("true")) receiveMessages();
        this.friendListBtn.setBackground(new java.awt.Color(57, 122, 255));
    }
    
    private void receiveMessages(){
        Socket socket = APServerConnector.getConnection();
        APServerOPInitializer opInit = new APServerOPInitializer();
        APServerPacketSender sender = new APServerPacketSender(socket);
        APServerPacketReceiver receiver = new APServerPacketReceiver(socket);
        APServerUtilities apUtil = new APServerUtilities();
        
        opInit.setOperationCode("RCV001");
        opInit.setMsgString(userCache.getLoginId());
        
        try{
            byte[] msgOut = apUtil.convertToBytes(opInit);
            sender.sendPacketSize(msgOut.length);
            sender.send(msgOut);
            
            int messageLength = receiver.receivePacketSize();
            //System.out.println("No of messages are = "+messageLength);
            MessageReceiver msg = new MessageReceiver(socket,messageLength);
            msg.run();
        
        }catch(Exception e){
            e.printStackTrace();
        }
    } 
    
    private void readCache(String loginId){
        CacheProcessor cProcessor = new CacheProcessor(loginId);
        //UserCache cache = null;
        if(cProcessor.isCachePresent()){
            userCache = cProcessor.getCache();
            //System.out.println("Cache present");
            
        }else{
            System.out.println("Creating cache");
            userCache = cProcessor.createCache(loginId);
        }
    }
    
    public void printFriendList(){
        this.emptyFriendTable();
        ArrayList<userDTOInterface> fList = userCache.getFriends();
        if(fList.isEmpty()){
            System.out.println("Empty freind list");
        }
        DefaultTableModel model = (DefaultTableModel) friendsTable.getModel();
        DefaultTableCellRenderer  df = new DefaultTableCellRenderer();
        df.setHorizontalAlignment(CENTER);
        df.setBorder(BorderFactory.createLineBorder(Color.white, 1));
        //df.setFont(new Font(""));
        friendsTable.getColumnModel().getColumn(0).setCellRenderer(df);
        for(userDTOInterface u : fList){
            model.addRow(new Object[] {u.getName()});
        }
    }
    
    public void printRequestList(){
        this.emptyFriendTable();
        ArrayList<userDTO> req = userCache.getRequests();
        DefaultTableModel model = (DefaultTableModel)friendsTable.getModel();
        if(req == null || req.size() == 0){
            model.addRow(new Object[]{"NO NEW REQUESTS"});
        }else{
            for(userDTO u : req){
                model.addRow(new Object[] {u.getName()});
            }
        }
    }
    
    public void addRequest(userDTO user){
        ChatFrame.userCache.addRequest(user);
    }  
    
    public UserCache getCache(){
        return userCache;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        messagePanel = new javax.swing.JPanel();
        addFileBtn = new javax.swing.JButton();
        sendMsgBtn = new javax.swing.JButton();
        MessageTextField = new javax.swing.JTextField();
        headerPanel = new javax.swing.JPanel();
        friendLoginId = new javax.swing.JTextField();
        addFriendBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        friendNameLabel = new javax.swing.JLabel();
        friendIdLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        friendListPanel = new javax.swing.JPanel();
        friendScroll = new javax.swing.JScrollPane();
        friendsTable = new javax.swing.JTable();
        AppNamePanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        chatLabel = new javax.swing.JPanel();
        chatTableScroll = new javax.swing.JScrollPane();
        chatTable = new javax.swing.JTable();
        optionsPanel = new javax.swing.JPanel();
        notificationBtn = new javax.swing.JButton();
        friendListBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Armored Pigeon");
        setSize(new java.awt.Dimension(1300, 650));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        messagePanel.setBackground(new java.awt.Color(22, 24, 25));
        messagePanel.setPreferredSize(new java.awt.Dimension(1257, 50));

        addFileBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/armored/pigeon/icons/icons8-add-file-35.png"))); // NOI18N
        addFileBtn.setBorder(null);
        addFileBtn.setContentAreaFilled(false);
        addFileBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addFileBtn.setMargin(new java.awt.Insets(2, 2, 2, 2));
        addFileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFileBtnActionPerformed(evt);
            }
        });

        sendMsgBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/armored/pigeon/icons/icons8-paper-plane-35.png"))); // NOI18N
        sendMsgBtn.setBorder(null);
        sendMsgBtn.setContentAreaFilled(false);
        sendMsgBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        sendMsgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendMsgBtnActionPerformed(evt);
            }
        });

        MessageTextField.setBackground(new java.awt.Color(233, 233, 233));
        MessageTextField.setFont(new java.awt.Font("Segoe UI Semibold", 1, 18)); // NOI18N
        MessageTextField.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        MessageTextField.setCaretColor(new java.awt.Color(0, 0, 204));

        org.jdesktop.layout.GroupLayout messagePanelLayout = new org.jdesktop.layout.GroupLayout(messagePanel);
        messagePanel.setLayout(messagePanelLayout);
        messagePanelLayout.setHorizontalGroup(
            messagePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(messagePanelLayout.createSequentialGroup()
                .add(6, 6, 6)
                .add(addFileBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(MessageTextField)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(sendMsgBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(5, 5, 5))
        );
        messagePanelLayout.setVerticalGroup(
            messagePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(messagePanelLayout.createSequentialGroup()
                .add(5, 5, 5)
                .add(messagePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(messagePanelLayout.createSequentialGroup()
                        .add(messagePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                            .add(sendMsgBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(addFileBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE))
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, MessageTextField))
                .addContainerGap())
        );

        headerPanel.setBackground(new java.awt.Color(152, 193, 217));
        headerPanel.setPreferredSize(new java.awt.Dimension(522, 55));

        friendLoginId.setFont(new java.awt.Font("Segoe UI Semibold", 1, 24)); // NOI18N
        friendLoginId.setForeground(new java.awt.Color(255, 255, 255));
        friendLoginId.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        friendLoginId.setBorder(null);
        friendLoginId.setOpaque(false);

        addFriendBtn.setBackground(new java.awt.Color(26, 26, 26));
        addFriendBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        addFriendBtn.setForeground(new java.awt.Color(255, 255, 255));
        addFriendBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/armored/pigeon/icons/icons8-search-30.png"))); // NOI18N
        addFriendBtn.setBorder(null);
        addFriendBtn.setContentAreaFilled(false);
        addFriendBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        addFriendBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFriendBtnActionPerformed(evt);
            }
        });

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/armored/pigeon/icons/icons8-male-user-45.png"))); // NOI18N
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel1MouseEntered(evt);
            }
        });

        friendNameLabel.setFont(new java.awt.Font("Times New Roman", 1, 20)); // NOI18N

        org.jdesktop.layout.GroupLayout headerPanelLayout = new org.jdesktop.layout.GroupLayout(headerPanel);
        headerPanel.setLayout(headerPanelLayout);
        headerPanelLayout.setHorizontalGroup(
            headerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, headerPanelLayout.createSequentialGroup()
                .add(15, 15, 15)
                .add(headerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(friendNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 287, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(friendIdLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 134, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 213, Short.MAX_VALUE)
                .add(headerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(headerPanelLayout.createSequentialGroup()
                        .add(friendLoginId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 250, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, 0)
                        .add(addFriendBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 290, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(26, 26, 26)
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(10, 10, 10))
        );
        headerPanelLayout.setVerticalGroup(
            headerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(headerPanelLayout.createSequentialGroup()
                .add(5, 5, 5)
                .add(headerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(headerPanelLayout.createSequentialGroup()
                        .add(headerPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.CENTER)
                            .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(addFriendBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(friendLoginId, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(0, 0, Short.MAX_VALUE)
                        .add(jSeparator1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 13, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(headerPanelLayout.createSequentialGroup()
                        .add(friendNameLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(2, 2, 2)
                        .add(friendIdLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 15, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        friendListPanel.setBackground(new java.awt.Color(19, 20, 23));
        friendListPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(57, 122, 255)));

        friendScroll.setBackground(new java.awt.Color(19, 20, 23));

        friendsTable.setBackground(new java.awt.Color(0, 0, 0));
        friendsTable.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        friendsTable.setForeground(new java.awt.Color(255, 255, 255));
        friendsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        friendsTable.setColumnSelectionAllowed(true);
        friendsTable.setFillsViewportHeight(true);
        friendsTable.setGridColor(new java.awt.Color(24, 26, 28));
        friendsTable.setRowHeight(45);
        friendsTable.setSelectionBackground(new java.awt.Color(152, 193, 217));
        friendsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        friendsTable.setShowVerticalLines(false);
        friendsTable.setTableHeader(null);
        friendsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                friendsTableMouseClicked(evt);
            }
        });
        friendScroll.setViewportView(friendsTable);
        friendsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        org.jdesktop.layout.GroupLayout friendListPanelLayout = new org.jdesktop.layout.GroupLayout(friendListPanel);
        friendListPanel.setLayout(friendListPanelLayout);
        friendListPanelLayout.setHorizontalGroup(
            friendListPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(friendScroll, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 362, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        friendListPanelLayout.setVerticalGroup(
            friendListPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(friendScroll, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 579, Short.MAX_VALUE)
        );

        AppNamePanel.setBackground(new java.awt.Color(0, 0, 0));
        AppNamePanel.setPreferredSize(new java.awt.Dimension(412, 70));

        jLabel2.setFont(new java.awt.Font("Algerian", 1, 30)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(152, 193, 217));
        jLabel2.setText("Armored Pigeon");

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/armored/pigeon/icons/AP 50 X 50.png"))); // NOI18N
        jLabel3.setText("jLabel3");
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);
        jLabel3.setIconTextGap(0);
        jLabel3.setPreferredSize(new java.awt.Dimension(60, 60));

        org.jdesktop.layout.GroupLayout AppNamePanelLayout = new org.jdesktop.layout.GroupLayout(AppNamePanel);
        AppNamePanel.setLayout(AppNamePanelLayout);
        AppNamePanelLayout.setHorizontalGroup(
            AppNamePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(AppNamePanelLayout.createSequentialGroup()
                .add(34, 34, 34)
                .add(jLabel3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 61, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(jLabel2)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        AppNamePanelLayout.setVerticalGroup(
            AppNamePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(AppNamePanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 38, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .add(jLabel3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        chatTableScroll.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        chatTable.setBackground(new java.awt.Color(22, 24, 25));
        chatTable.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        chatTable.setForeground(new java.awt.Color(255, 255, 255));
        chatTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        chatTable.setFillsViewportHeight(true);
        chatTable.setGridColor(new java.awt.Color(0, 0, 0));
        chatTable.setIntercellSpacing(new java.awt.Dimension(5, 7));
        chatTable.setRowHeight(45);
        chatTable.setRowSelectionAllowed(false);
        chatTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        chatTable.setShowHorizontalLines(false);
        chatTable.setShowVerticalLines(false);
        chatTable.setTableHeader(null);
        chatTableScroll.setViewportView(chatTable);

        org.jdesktop.layout.GroupLayout chatLabelLayout = new org.jdesktop.layout.GroupLayout(chatLabel);
        chatLabel.setLayout(chatLabelLayout);
        chatLabelLayout.setHorizontalGroup(
            chatLabelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, chatTableScroll)
        );
        chatLabelLayout.setVerticalGroup(
            chatLabelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(chatTableScroll)
        );

        optionsPanel.setBackground(new java.awt.Color(0, 0, 0));

        notificationBtn.setBackground(new java.awt.Color(0, 0, 0));
        notificationBtn.setForeground(new java.awt.Color(255, 255, 255));
        notificationBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/armored/pigeon/icons/icons8-add-user-male-45.png"))); // NOI18N
        notificationBtn.setBorder(null);
        notificationBtn.setContentAreaFilled(false);
        notificationBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        notificationBtn.setIconTextGap(1);
        notificationBtn.setMargin(new java.awt.Insets(1, 1, 1, 1));
        notificationBtn.setOpaque(true);
        notificationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                notificationBtnActionPerformed(evt);
            }
        });

        friendListBtn.setBackground(new java.awt.Color(0, 0, 0));
        friendListBtn.setForeground(new java.awt.Color(255, 255, 255));
        friendListBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/armored/pigeon/icons/icons8-users-45.png"))); // NOI18N
        friendListBtn.setBorder(null);
        friendListBtn.setContentAreaFilled(false);
        friendListBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        friendListBtn.setMargin(new java.awt.Insets(2, 2, 2, 2));
        friendListBtn.setOpaque(true);
        friendListBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                friendListBtnMouseEntered(evt);
            }
        });
        friendListBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                friendListBtnActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout optionsPanelLayout = new org.jdesktop.layout.GroupLayout(optionsPanel);
        optionsPanel.setLayout(optionsPanelLayout);
        optionsPanelLayout.setHorizontalGroup(
            optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsPanelLayout.createSequentialGroup()
                .add(0, 0, Short.MAX_VALUE)
                .add(optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, notificationBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, friendListBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
        );
        optionsPanelLayout.setVerticalGroup(
            optionsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(optionsPanelLayout.createSequentialGroup()
                .add(friendListBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(notificationBtn, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, Short.MAX_VALUE))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(layout.createSequentialGroup()
                        .add(optionsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(0, 0, 0)
                        .add(friendListPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(AppNamePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, headerPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE)
                    .add(chatLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(messagePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(0, 0, 0)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(headerPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(AppNamePanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 60, Short.MAX_VALUE))
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(chatLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(0, 0, 0)
                        .add(messagePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(friendListPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(optionsPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .add(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addFriendBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFriendBtnActionPerformed

        String loginId = friendLoginId.getText();
        if(loginId.equals("")){
            return;
        }
        if(loginId.equalsIgnoreCase(userCache.getLoginId())){
            friendLoginId.setText("It's You");
            return;
        }
        for(userDTOInterface u: userCache.getFriends()){
            if(u.getLoginID().equalsIgnoreCase(loginId)){
                friendLoginId.setText("That's your Friend");
                return;
            }
        }
        
        try{
            APServerOPInitializer apInit = new APServerOPInitializer();
            APServerUtilities apUtil = new APServerUtilities();
            
            Socket socket = APServerConnector.getConnection();
            APServerPacketSender apSend = new APServerPacketSender(socket);
            APServerPacketReceiver apReceive = new APServerPacketReceiver(socket);
            
            //FEEDING OPINITIALIZER
            apInit.setOperationCode("DSK003");
            apInit.setMsgString(loginId);
            
            //CONVERTING TO BYTEARRAY
            byte[] arr = apUtil.convertToBytes(apInit);
            int length = arr.length;
            
            //SENDING LENGTH OF ARRAY
            apSend.sendPacketSize(length);
            
            //SENDING ARRAY
            apSend.send(arr);
            
            //RECEIVING LEN
            int len = apReceive.receivePacketSize();
            
            System.out.println("Length received = "+len);
            
            if(len == -1){
                friendLoginId.setText("Wrong ID");
                return;
            }else{
                byte[] inArr = apReceive.receive(len);
                friendInfo = (userDTO)apUtil.convertFromBytes(inArr);
                FriendInfoFrame fFrame = new FriendInfoFrame();
                fFrame.setUserCache(userCache);
                fFrame.setFriendInfo(friendInfo);
                fFrame.setVisible(true);
                fFrame.setfriendLabel();
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_addFriendBtnActionPerformed

    
    private void notificationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_notificationBtnActionPerformed
        this.btnType = 2;
        printRequestList();
        this.friendListBtn.setBackground(new java.awt.Color(0,0,0));
        this.notificationBtn.setBackground(new java.awt.Color(57, 122, 255));
    }//GEN-LAST:event_notificationBtnActionPerformed

    private void friendListBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_friendListBtnActionPerformed
        this.btnType = 1;
        emptyFriendTable();
        this.printFriendList();
        this.friendListBtn.setBackground(new java.awt.Color(57, 122, 255));
        this.notificationBtn.setBackground(new java.awt.Color(0,0,0));
    }//GEN-LAST:event_friendListBtnActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try{
        Socket socket = APServerConnector.getConnection();
        APServerOPInitializer aps = new APServerOPInitializer();
        APServerPacketSender apSend = new APServerPacketSender(socket);
        APServerUtilities apUtil = new APServerUtilities();
        
        aps.setOperationCode("DSK404");
        aps.setMsgString(userCache.getLoginId());
        byte[] arr = apUtil.convertToBytes(aps);
        apSend.sendPacketSize(arr.length);
        apSend.send(arr);
        //System.out.println("IN Finalize");
        socket.close();
        APServerConnector.closeConnection();
        }catch(Exception e){
            e.printStackTrace();
        }
    }//GEN-LAST:event_formWindowClosing

    private void addFileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFileBtnActionPerformed
        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getDefaultDirectory());
        int returnValue = jfc.showOpenDialog(null);
        File file;
        byte fileArr[] = new byte[0];
        String fileName;
        Message message = new Message();
        if(returnValue == JFileChooser.APPROVE_OPTION){
            file = jfc.getSelectedFile();
            fileName = file.getName();
            //System.out.println(file.length());
            //System.out.println(file.getPath());
            //System.out.println(file.getAbsolutePath());
            
            message.setReceiver(recipient.getLoginID());
            message.setSender(userCache.getLoginId());
            message.setType("FILE");
            message.setFileName(file.getName());
            try{
                FileInputStream fin= new FileInputStream(file.getPath());
                fileArr = new byte[(int)file.length()];
                fin.read(fileArr);
            }catch(Exception e){
                e.printStackTrace();
            }
            MessageProcessor processor = new MessageProcessor();
            byte[][] fArr = processor.convertToArray(fileArr);
            processor.saveMessage(fArr, fileName);
            
            sendFile(fileArr, fileName);
            message.setFile(new byte[0]);
            messages.add(message);
            writeMessage();
            emptyChatTable();
            printChats();
            
        }
        //addMessage(message);
    }//GEN-LAST:event_addFileBtnActionPerformed

    private void sendMsgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendMsgBtnActionPerformed
        if(MessageTextField.getText().equals("")){
            return;
        }else{
            String message = MessageTextField.getText();
            //printUserMessage(message);
            
            Message msg = new Message();
            msg.setSender(userCache.getLoginId());
            msg.setReceiver(recipient.getLoginID());
            msg.setType("MSG");
            msg.setMessage(message);
            msg.setFileName("MESSAGE");
            System.out.println("Message receiver = "+msg.getReceiver());
            messages.add(msg);
            
            //addMessage(msg);
            writeMessage();
            sendMessage(msg);
            MessageTextField.setText("");
            printChats();
        }
    }//GEN-LAST:event_sendMsgBtnActionPerformed

    private void friendsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_friendsTableMouseClicked
        int index = friendsTable.getSelectedRow();
        if(index == -1) return;
        String val = friendsTable.getValueAt(index, 0).toString();
        //System.out.println(userCache.getFriends().get(index).getName());
        if(this.btnType == 1){
            recipient = userCache.getFriends().get(index);
            this.friendIdLabel.setText(recipient.getLoginID());
            this.friendNameLabel.setText(recipient.getName());
            messages = getMessageCache(recipient.getLoginID());
            
            emptyChatTable();
            printChats();
        }else{
            if(!val.equalsIgnoreCase("no new requests")){
                FriendRequestFrame fReqFrame = new FriendRequestFrame();
                fReqFrame.setFriend(userCache.getRequests().get(index));
                fReqFrame.setUser(userCache);
                fReqFrame.setVisible(true);
                fReqFrame.setInfo();
            }
        }
        this.messagePanel.setVisible(true);
    }//GEN-LAST:event_friendsTableMouseClicked

    private void friendListBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_friendListBtnMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_friendListBtnMouseEntered

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        UserInfoFrame uFrame = new UserInfoFrame();
        uFrame.setDesktopId(userCache.getDesktopId());
        uFrame.setLoginId(userCache.getLoginId());
        uFrame.setUserName(userCache.getUserName());
        uFrame.setEmailId(userCache.getMailID());
        uFrame.showInfo();
        uFrame.setVisible(true);
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel1MouseEntered
  
    public void colorCells(JTable table, int column_index){
        DefaultTableCellRenderer df = new DefaultTableCellRenderer(){
            @Override
            
            public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column){
                final Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                //Color col = getBackground();
                
                String val = table.getValueAt(row,column_index).toString();
                
                if(val.equals("")){
                    c.setBackground(new java.awt.Color(22, 24, 25));
                    return c;
                }
                
                if(column_index == 0){
                    c.setBackground(new java.awt.Color(238, 108, 77));
                }
                else{
                    c.setBackground(new java.awt.Color(57, 122, 255));
                    
                }
                return c;
            }
        };
        if(column_index == 0){
            df.setHorizontalAlignment(LEFT);
        }
        else{
            df.setHorizontalAlignment(RIGHT);
        }
        table.getColumnModel().getColumn(column_index).setCellRenderer(df);
        
    }
    
    public void printUserMessage(String message){
        DefaultTableModel df = (DefaultTableModel)chatTable.getModel();
        df.addRow(new Object[]{"","",message+"  "});
        colorCells(chatTable,2);
    }
    
    public void printFriendMessage(String message){
        DefaultTableModel df = (DefaultTableModel)chatTable.getModel();
        df.addRow(new Object[]{"  "+message,"",""});
        colorCells(chatTable, 0);
    }
    
    public void sendMessage(Message message){
        try{
            Socket socket = APServerConnector.getConnection();
            APServerOPInitializer apInit = new APServerOPInitializer();
            APServerPacketSender apSend = new APServerPacketSender(socket);
            APServerPacketReceiver apReceive = new APServerPacketReceiver(socket);
            APServerUtilities apUtil = new APServerUtilities();
            Date date = new Date();
            MessageProcessor processor = new MessageProcessor();
            
            byte[] outArr = apUtil.convertToBytes(message);
            
            apInit.setOperationCode("DSK359");
            String msg = userCache.getLoginId() + "," + recipient.getLoginID() +","+ outArr.length +","+ message.getType()+","+message.getFileName();
            apInit.setMsgString(msg);
            //System.out.println("Message byte[] length = "+ outArr.length);
            
            byte[][] dArray = processor.convertToArray(outArr);
            
            // FOR TESTING 
            
            //byte[] demoMsg = message.getFile();
            //byte[][] dArray = processor.convertToArray(demoMsg);
            
            // END TESTING
            
            byte[] apArr = apUtil.convertToBytes(apInit);
            
            apSend.sendPacketSize(apArr.length);
            apSend.send(apArr);
            
            //apSend.send(outArr);
            apSend.send(dArray);
            
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    public void sendFile(byte[] file, String fileName){
        try{
            Socket socket = APServerConnector.getConnection();
            APServerOPInitializer apInit = new APServerOPInitializer();
            APServerPacketSender apSend = new APServerPacketSender(socket);
            APServerPacketReceiver apReceive = new APServerPacketReceiver(socket);
            APServerUtilities apUtil = new APServerUtilities();
            Date date = new Date();
            MessageProcessor processor = new MessageProcessor();
            
            apInit.setOperationCode("DSK359");
            String msg = userCache.getLoginId() + "," + recipient.getLoginID() +","+ file.length +",FILE,"+fileName;
            apInit.setMsgString(msg);
           
            byte[][] fileArr = processor.convertToArray(file);
            //processor.saveMessage(fileArr, fileName);
            
            byte[] apArr = apUtil.convertToBytes(apInit);
            
            apSend.sendPacketSize(apArr.length);
            apSend.send(apArr);
            
            apSend.send(fileArr);
            
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }
    
    private ArrayList<Message> getMessageCache(String loginID) {
        if(messageCache.containsKey(loginId)){
            return messageCache.get(loginID);
        }else{
            ChatReader chats = new ChatReader(loginID, userCache.getLoginId());
            if(chats.messagesPresent()){
                messageCache.put(loginID, chats.getMessages());
                return messageCache.get(loginID);
            }else{
                messageCache.put(loginID, new ArrayList<Message>());
            }
        }
        return new ArrayList<Message>();
    }
    
    public void writeMessage(){
        
        //messages = messageCache.get(recipient.getLoginID());
        ChatWriter write = new ChatWriter(recipient.getLoginID(), userCache.getLoginId());
        write.backup(messages);
        messageCache.put(recipient.getLoginID(), messages);
    }
    
    public void printChats(){
        emptyChatTable();
        if(friendsTable.getSelectedRow() == -1) return;
        if(messages == null || messages.isEmpty()) return;
        for(Message m: messages){
            if(m.getSender().equals(userCache.getLoginId())){
                if(m.getType().equals("MSG")) printUserMessage(m.getMessage());
                else printUserMessage(m.getFileName());
            }else{
                if(m.getType().equals("MSG")) printFriendMessage(m.getMessage());
                else printFriendMessage(m.getFileName());
            }
        }
        chatTable.scrollRectToVisible(chatTable.getCellRect(chatTable.getRowCount(), 0, true));
    }
    
    private void emptyFriendTable(){
        DefaultTableModel model = (DefaultTableModel)this.friendsTable.getModel();
        int count = model.getRowCount();
        for(int i = count -1; i>=0;i--){
            model.removeRow(i);
        }
    }
    
    private void emptyChatTable(){
        DefaultTableModel model = (DefaultTableModel)this.chatTable.getModel();
        int count = model.getRowCount();
        for(int i = count-1;i>=0;i--){
            model.removeRow(i);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ChatFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ChatFrame().setVisible(true);
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AppNamePanel;
    private javax.swing.JTextField MessageTextField;
    private javax.swing.JButton addFileBtn;
    private javax.swing.JButton addFriendBtn;
    private javax.swing.JPanel chatLabel;
    private javax.swing.JTable chatTable;
    private javax.swing.JScrollPane chatTableScroll;
    private javax.swing.JLabel friendIdLabel;
    private javax.swing.JButton friendListBtn;
    private javax.swing.JPanel friendListPanel;
    private javax.swing.JTextField friendLoginId;
    private javax.swing.JLabel friendNameLabel;
    private javax.swing.JScrollPane friendScroll;
    private javax.swing.JTable friendsTable;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel messagePanel;
    private javax.swing.JButton notificationBtn;
    private javax.swing.JPanel optionsPanel;
    private javax.swing.JButton sendMsgBtn;
    // End of variables declaration//GEN-END:variables

    
}
